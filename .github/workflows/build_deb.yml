name: build-multi-platform

on:
  push:
    tags:
      - '**'

jobs:
  build:
    continue-on-error: false
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, ubuntu-22.04-arm64, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up QEMU (Linux only)
        if: startsWith(matrix.os, 'ubuntu-')
        uses: docker/setup-qemu-action@v3

      - name: Install dependencies
        shell: bash
        run: |
          if [[ "${{ matrix.os }}" == ubuntu* ]]; then
            sudo apt-get update
            sudo DEBIAN_FRONTEND=noninteractive TZ=Etc/UTC apt-get -y install tzdata
            sudo apt-get install -y build-essential debhelper dh-make devscripts libgtk-3-0 libgtk-3-dev git
          elif [[ "${{ matrix.os }}" == macos-* ]]; then
            brew install gtk+3
          elif [[ "${{ matrix.os }}" == windows-latest ]]; then
            choco install msys2 -y
            export PATH="$PATH:/c/tools/msys64/usr/bin:/c/tools/msys64/mingw64/bin"
            pacman -Syu --noconfirm
            pacman -S --noconfirm mingw-w64-ucrt-x86_64-gtk3 git mingw-w64-ucrt-x86_64-toolchain base-devel gcc pkg-config mingw-w64-x86_64-gtk3
            echo 'export LIBRARY_PATH=/mingw64/lib:$LIBRARY_PATH' >> ~/.bashrc
            echo 'export PKG_CONFIG_PATH=/mingw64/lib/pkgconfig:/mingw64/share/pkgconfig' >> ~/.bashrc
            source ~/.bashrc
          fi

      - name: Clone external database
        run: git clone https://github.com/autodiag2/database data || true

      - name: Submodule update
        run: git submodule update --init --recursive || true

      - name: Build
        shell: bash
        run: |
          if [[ "${{ matrix.os }}" == ubuntu* ]]; then
            make distDebian
          else
            make release_progs
          fi

      - name: Find tag name
        id: find_tag_name
        run: echo "tag_name=$(echo $GITHUB_REF | sed 's|refs/tags/||')" >> $GITHUB_OUTPUT

      - name: Release (Linux)
        if: startsWith(matrix.os, 'ubuntu-')
        uses: softprops/action-gh-release@v1
        with:
          files: |
            bin/*.deb
            bin/*.so
          tag_name: ${{ steps.find_tag_name.outputs.tag_name }}
          name: Release ${{ steps.find_tag_name.outputs.tag_name }}
          token: ${{ secrets.TOKEN }}
          draft: false
          prerelease: false

      - name: Release (macOS)
        if: startsWith(matrix.os, 'macos-')
        uses: softprops/action-gh-release@v1
        with:
          files: bin/*.dylib
          tag_name: ${{ steps.find_tag_name.outputs.tag_name }}
          name: Release ${{ steps.find_tag_name.outputs.tag_name }}
          token: ${{ secrets.TOKEN }}
          draft: false
          prerelease: false

      - name: Release (Windows)
        if: startsWith(matrix.os, 'windows-')
        uses: softprops/action-gh-release@v1
        with:
          files: bin/*.dll
          tag_name: ${{ steps.find_tag_name.outputs.tag_name }}
          name: Release ${{ steps.find_tag_name.outputs.tag_name }}
          token: ${{ secrets.TOKEN }}
          draft: false
          prerelease: false
