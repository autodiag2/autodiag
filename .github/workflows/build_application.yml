name: build-multi-platform

on:
  push:
    tags:
      - '**'

jobs:

  tag:
    runs-on: ubuntu-latest
    outputs:
      tag_name: ${{ steps.find_tag_name.outputs.tag_name }}
    steps:
      - name: Extract tag name
        id: find_tag_name
        run: echo "tag_name=$(echo $GITHUB_REF | sed 's|refs/tags/||')" >> $GITHUB_OUTPUT

  build:
    needs: tag
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        #    amd64          arm64         amd64
        os: [windows-latest] # windows-latest not ready yet
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up QEMU (Linux only)
        if: startsWith(matrix.os, 'ubuntu-')
        uses: docker/setup-qemu-action@v3

      - name: Install dependencies
        shell: bash
        run: |
          if [[ "${{ matrix.os }}" == ubuntu* ]]; then
            sudo apt-get update
            sudo DEBIAN_FRONTEND=noninteractive TZ=Etc/UTC apt-get -y install tzdata
            sudo apt-get install -y build-essential debhelper dh-make devscripts libgtk-3-0 libgtk-3-dev git
          elif [[ "${{ matrix.os }}" == macos* ]]; then
            brew install gtk+3
          elif [[ "${{ matrix.os }}" == windows* ]]; then
            choco install msys2 -y
            /c/tools/msys64/usr/bin/bash -lc 'pacman -Syu --noconfirm'
            /c/tools/msys64/usr/bin/bash -lc 'pacman -S --noconfirm mingw-w64-ucrt-x86_64-gtk3 git mingw-w64-ucrt-x86_64-toolchain base-devel gcc pkg-config mingw-w64-x86_64-gtk3'
            /c/tools/msys64/usr/bin/bash -lc 'echo "export LIBRARY_PATH=/mingw64/lib:\$LIBRARY_PATH" >> ~/.bashrc'
            /c/tools/msys64/usr/bin/bash -lc 'echo "export PKG_CONFIG_PATH=/mingw64/lib/pkgconfig:/mingw64/share/pkgconfig" >> ~/.bashrc'
          fi

      - name: Clone external database
        run: git clone --depth=1 https://github.com/autodiag2/database data || true

      - name: Submodule update
        run: git submodule update --init --recursive || true

      - name: Build
        shell: bash
        run: |
          if [[ "${{ matrix.os }}" == ubuntu* ]]; then
            make distDebian
          elif [[ "${{ matrix.os }}" == macos* ]]; then
            make distMacOS
          elif [[ "${{ matrix.os }}" == windows* ]]; then
            location="$(pwd)"
            /c/tools/msys64/usr/bin/bash -lc "cd $location && LIBRARY_PATH=/mingw64/lib:\"\$LIBRARY_PATH\" make release_progs"
          else
            echo "unsupported OS"
            exit 1
          fi

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            bin/*.deb
            bin/*.so
            bin/*.dylib
            bin/*.dll
            bin/*.dmg
            bin/*.exe
          tag_name: ${{ needs.tag.outputs.tag_name }}
          name: Release ${{ needs.tag.outputs.tag_name }}
          token: ${{ secrets.TOKEN }}
          draft: false
          prerelease: false

  cross-compile-windows-dlls:
    runs-on: macos-latest
    needs: tag
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install mingw-w64
        run: brew install mingw-w64

      - name: Clone external database
        run: git clone --depth=1 https://github.com/autodiag2/database data || true

      - name: Submodule update
        run: git submodule update --init --recursive || true

      - name: Cross-compile for x86_64
        run: |
          make veryclean
          export TOOLCHAIN=x86_64-w64-mingw32-
          make compile_lib

      - name: Upload DLL x86_64 to GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            bin/*.dll
          tag_name: ${{ needs.tag.outputs.tag_name }}
          name: Release ${{ needs.tag.outputs.tag_name }}
          token: ${{ secrets.TOKEN }}
          draft: false
          prerelease: false

      - name: Cross-compile for i686
        run: |
          make veryclean
          export TOOLCHAIN=i686-w64-mingw32-
          make compile_lib

      - name: Upload DLL i686 to GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            bin/*.dll
          tag_name: ${{ needs.tag.outputs.tag_name }}
          name: Release ${{ needs.tag.outputs.tag_name }}
          token: ${{ secrets.TOKEN }}
          draft: false
          prerelease: false

  package-python:
    needs: [tag, build, cross-compile-windows-dlls]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Download compiled libs from GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        run: |
          tag="${{ needs.tag.outputs.tag_name }}"
          mkdir -p pyautodiag/autodiag/libs
          cd pyautodiag/autodiag/libs
          gh release download "$tag" --pattern "*.so" --pattern "*.dylib" --pattern "*.dll" --repo "$GITHUB_REPOSITORY"

      - name: Clone database
        run: |
          git clone --depth 1 https://github.com/autodiag2/database pyautodiag/autodiag/data

      - name: Build Python package
        working-directory: pyautodiag
        run: python3 setup.py sdist bdist_wheel

      - name: Upload Python wheel to GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: pyautodiag/dist/*.whl
          tag_name: ${{ needs.tag.outputs.tag_name }}
          name: Release ${{ needs.tag.outputs.tag_name }}
          token: ${{ secrets.TOKEN }}
          draft: false
          prerelease: false